# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/patchelf/all/patchelf.rbi
#
# patchelf-1.3.0

module PatchELF
end
class PatchELF::PatchError < ELFTools::ELFError
end
class PatchELF::MissingTagError < PatchELF::PatchError
end
class PatchELF::MissingSegmentError < PatchELF::PatchError
end
module PatchELF::Helper
  def aligndown(val, align = nil); end
  def alignup(val, align = nil); end
  def color_enabled?; end
  def colorize(str, type); end
  def self.aligndown(val, align = nil); end
  def self.alignup(val, align = nil); end
  def self.color_enabled?; end
  def self.colorize(str, type); end
end
module PatchELF::Logger
  def debug(msg); end
  def error(msg); end
  def info(msg); end
  def level=(msg); end
  def self.debug(msg); end
  def self.error(msg); end
  def self.info(msg); end
  def self.level=(msg); end
  def self.warn(msg); end
  def warn(msg); end
end
class PatchELF::MM
  def abnormal_elf(msg); end
  def dispatch!; end
  def extend_backward(seg, size = nil); end
  def extend_forward(seg, size = nil); end
  def extend_size; end
  def extended?; end
  def extended_offset(off); end
  def fgap_method; end
  def find_gap(check_sz: nil); end
  def initialize(elf); end
  def invoke_callbacks(seg, start); end
  def load_segments; end
  def malloc(size, &block); end
  def mgap_method; end
  def new_load_method; end
  def shift_attributes; end
  def threshold; end
  def writable?(seg); end
end
class PatchELF::Saver
  def dynamic; end
  def expand_dynamic!; end
  def in_file; end
  def initialize(in_file, out_file, set); end
  def inline_patch(off, str); end
  def lazy_dyn(sym); end
  def malloc_strtab!; end
  def out_file; end
  def patch_dynamic; end
  def patch_interpreter; end
  def patch_needed; end
  def patch_out(out_file); end
  def patch_runpath(sym = nil); end
  def patch_soname; end
  def reg_str_table(str, &block); end
  def save!; end
  def section_header(name); end
  def strtab_string; end
end
class PatchELF::Patcher
  def add_needed(need); end
  def dirty?; end
  def dynamic_or_log; end
  def elf; end
  def initialize(filename, on_error: nil, logging: nil); end
  def interpreter; end
  def interpreter=(interp); end
  def interpreter_; end
  def log_or_raise(msg, exception = nil); end
  def needed; end
  def needed=(needs); end
  def needed_; end
  def remove_needed(need); end
  def replace_needed(src, tar); end
  def rpath; end
  def rpath=(rpath); end
  def runpath; end
  def runpath=(runpath); end
  def runpath_(rpath_sym = nil); end
  def save(out_file = nil, patchelf_compatible: nil); end
  def soname; end
  def soname=(name); end
  def soname_; end
  def tag_name_or_log(type, log_msg); end
  def use_rpath!; end
end
